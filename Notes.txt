TODOs:

0)
member/2
asserta/1
call/1
forall/2
is_list/1
memberchk/2
throw/1
var/1
- ground, atom, atomic,var,functor,arg, =.. number (in the compiler)
- atom_codes
- call
- findall
- length
- is_list


1)
completely support all standard control-flow predicates: 
	C -> T ; E
	C *-> T ; E
	C -> B
	C *-> B (this is the same as "and")
are not yet supported.
Idea: implement these control-flow predicates by using "artificial goals" to
implement the condition-local cut.

2)
Implement functionality to test and extract values from terms if possible (instead of unifying)

3)
Implement more complete support for last call optimization (e.g., to support the integers predicate of primes)

4) 
Type specialization

5)
Improve the analysis of predicates to determine how many solutions will be generated at runtime

6)
(If necessary) Add a method to the goal interface that enables the caller of a predicate to identify the number of further solutions (e.g. a method hasMore() 
where the answers are: No, Maybe, Yes)

7) Generate a "test" method (additionally to the next method)?


How to use the compiler:

make,compile('benchmarks/einsteins_riddle.pl','build/src/java/'),compile('benchmarks/hanoi.pl','build/src/java/'),compile('benchmarks/primes.pl','build/src/java/'),compile('benchmarks/qsort.pl','build/src/java/'),compile('benchmarks/queens.pl','build/src/java/'),compile('benchmarks/tak.pl','build/src/java/'),compile('benchmarks/ancestor.pl','build/src/java/'),compile('benchmarks/chat_parser.pl','build/src/java/'),compile('benchmarks/nrev.pl','build/src/java/'),compile('benchmarks/zebra.pl','build/src/java/').

